#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_public –≤ —Ç–∞–±–ª–∏—Ü—É checklists
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Alembic
"""
import sqlite3
import sys
import os

def find_database():
    """–ü–æ–∏—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    possible_paths = [
        "instance/app.db",
        "app.db",
        "/srv/neuro_expert/ppee-flask/instance/app.db",
        "/srv/neuro_expert/ppee-flask/app.db",
        "/srv/neuro_expert/app.db"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            return path
    
    print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏:")
    for path in possible_paths:
        print(f"  {path}")
    return None

def check_and_add_column():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_public"""
    db_path = find_database()
    if not db_path:
        sys.exit(1)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(checklists);")
        columns = cursor.fetchall()
        column_names = [column[1] for column in columns]
        
        print("\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ checklists:")
        for col in columns:
            print(f"  - {col[1]} ({col[2]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ is_public
        if 'is_public' not in column_names:
            print("\nüîß –ö–æ–ª–æ–Ω–∫–∞ is_public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤–ª—è–µ–º...")
            cursor.execute("ALTER TABLE checklists ADD COLUMN is_public BOOLEAN DEFAULT 0 NOT NULL;")
            conn.commit()
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_public —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cursor.execute("PRAGMA table_info(checklists);")
            new_columns = cursor.fetchall()
            print("\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
            for col in new_columns:
                if col[1] == 'is_public':
                    print(f"  ‚úÖ {col[1]} ({col[2]}) - –î–û–ë–ê–í–õ–ï–ù–ê")
                else:
                    print(f"  - {col[1]} ({col[2]})")
        else:
            print("\n‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_public —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        conn.close()
        print("\nüéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

if __name__ == "__main__":
    print("=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_public –≤ —Ç–∞–±–ª–∏—Ü—É checklists")
    print()
    
    check_and_add_column()